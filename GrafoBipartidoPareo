#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

class BipartiteGraph {
    int leftSetSize, rightSetSize;
    vector<vector<int>> graph;
    vector<int> leftMatch, rightMatch, dist, mate;

public:
    BipartiteGraph(int leftSize, int rightSize) {
        leftSetSize = leftSize;
        rightSetSize = rightSize;
        graph.resize(leftSize + 1, vector<int>(rightSize + 1, 0));
    }

    void addEdge(int left, int right) {
        graph[left][right] = 1;
    }

    bool bfs() {
        dist.assign(leftSetSize + 1, INT_MAX);
        mate.assign(leftSetSize + 1, 0);

        queue<int> q;

        for (int left = 1; left <= leftSetSize; left++) {
            if (leftMatch[left] == 0) {
                dist[left] = 0;
                q.push(left);
            }
        }

        while (!q.empty()) {
            int left = q.front();
            q.pop();

            if (dist[left] < dist[0]) {
                for (int right = 1; right <= rightSetSize; right++) {
                    if (graph[left][right] && dist[mate[right]] == INT_MAX) {
                        dist[mate[right]] = dist[left] + 1;
                        q.push(mate[right]);
                    }
                }
            }
        }

        return (dist[0] != INT_MAX);
    }

    bool dfs(int left) {
        if (left != 0) {
            for (int right = 1; right <= rightSetSize; right++) {
                if (graph[left][right] && dist[mate[right]] == dist[left] + 1 && dfs(mate[right])) {
                    mate[right] = left;
                    leftMatch[left] = right;
                    rightMatch[right] = left;
                    return true;
                }
            }
            dist[left] = INT_MAX;
            return false;
        }
        return true;
    }

    int edmonds() {
        leftMatch.assign(leftSetSize + 1, 0);
        rightMatch.assign(rightSetSize + 1, 0);
        int result = 0;

        while (bfs()) {
            for (int left = 1; left <= leftSetSize; left++) {
                if (leftMatch[left] == 0) {
                    if (dfs(left)) {
                        result++;
                    }
                }
            }
        }

        return result;
    }

    void printMatching() {
        cout << "Emparejamiento maximo:" << endl;
        for (int left = 1; left <= leftSetSize; left++) {
            if (leftMatch[left] != 0) {
                cout << "(" << left << ", " << leftMatch[left] << ")" << endl;
            }
        }
    }
};

int main() {
    // Ejemplo de uso
    BipartiteGraph graph(6, 6);

    // Agregar aristas al grafo bipartito
    graph.addEdge(1, 2);
    graph.addEdge(1, 3);
    graph.addEdge(2, 4);
    graph.addEdge(4, 5);
    graph.addEdge(5, 6);

    int maxMatching = graph.edmonds();

    cout << "El emparejamiento maximo es: " << maxMatching << endl;

    // Imprimir las parejas obtenidas
    graph.printMatching();

    return 0;
}
